name: Github Actions CI

on:
  pull_request:
  push:
    branches:
      - master
      - develop
      - githubactions*
      - feature/**
      - fix/**
      - pr/**

jobs:
  posix:
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: "TOOLSET=gcc COMPILER=g++ CXXSTD=03,11,14 ADDR Job 0"
            buildtype: "boost"
            packages: "g++-multilib gcc-multilib"
            packages_to_remove: ""
            os: "ubuntu-16.04"
            cxx: "g++"
            sources: ""
            llvm_os: ""
            llvm_ver: ""
            toolset: "gcc"
            compiler: "g++"
            cxxstd: "03,11,14"
            addrmd: "32,64"
          - name: "TOOLSET=gcc COMPILER=g++ CXXSTD=03,11,14 ADDR Job 1"
            buildtype: "boost"
            packages: "gcc-multilib g++-multilib"
            packages_to_remove: ""
            os: "ubuntu-16.04"
            cxx: "g++"
            sources: ""
            llvm_os: ""
            llvm_ver: ""
            toolset: "gcc"
            compiler: "g++"
            cxxstd: "03,11,14"
            addrmd: "32,64"
          - name: "TOOLSET=gcc COMPILER=g++ CXXSTD=03,11,14 Job 2"
            buildtype: "boost"
            packages: ""
            packages_to_remove: ""
            os: "ubuntu-16.04"
            cxx: "g++"
            sources: ""
            llvm_os: ""
            llvm_ver: ""
            toolset: "gcc"
            compiler: "g++"
            cxxstd: "03,11,14"
          - name: "TOOLSET=gcc COMPILER=g++ CXXSTD=03,11,14 ADDR Job 3"
            buildtype: "boost"
            packages: "gcc-multilib g++-multilib"
            packages_to_remove: ""
            os: "ubuntu-16.04"
            cxx: "g++"
            sources: ""
            llvm_os: ""
            llvm_ver: ""
            toolset: "gcc"
            compiler: "g++"
            cxxstd: "03,11,14"
            addrmd: "32,64"
          - name: "TOOLSET=gcc COMPILER=g++-4.4 CXXSTD=98,0x Job 4"
            buildtype: "boost"
            packages: "g++-4.4"
            packages_to_remove: ""
            os: "ubuntu-16.04"
            cxx: "g++"
            sources: ""
            llvm_os: ""
            llvm_ver: ""
            toolset: "gcc"
            compiler: "g++-4.4"
            cxxstd: "98,0x"
          - name: "TOOLSET=gcc COMPILER=g++-4.6 CXXSTD=03,0x Job 5"
            buildtype: "boost"
            packages: "g++-4.6"
            packages_to_remove: ""
            os: "ubuntu-16.04"
            cxx: "g++"
            sources: ""
            llvm_os: ""
            llvm_ver: ""
            toolset: "gcc"
            compiler: "g++-4.6"
            cxxstd: "03,0x"
          - name: "UBSAN=1 TOOLSET=gcc COMPILER=g++-10 CXXSTD=03 Job 6"
            buildtype: "boost"
            packages: "g++-10"
            packages_to_remove: ""
            os: "ubuntu-18.04"
            cxx: "g++-10"
            sources: ""
            llvm_os: ""
            llvm_ver: ""
            ubsan: "1"
            toolset: "gcc"
            compiler: "g++-10"
            cxxstd: "03,11,14,17,20"
            ubsan_options: "print_stacktrace=1"
            linkflags: "-fuse-ld=gold"
          - name: "TOOLSET=clang COMPILER=/usr/bin/clang++ CXXST Job 7"
            buildtype: "boost"
            packages: "clang-3.3"
            packages_to_remove: ""
            os: "ubuntu-16.04"
            container: "ubuntu:14.04"
            cxx: "/usr/bin/clang++"
            sources: ""
            llvm_os: ""
            llvm_ver: ""
            toolset: "clang"
            compiler: "/usr/bin/clang++"
            cxxstd: "03,11"
          - name: "TOOLSET=clang COMPILER=/usr/bin/clang++ CXXST Job 8"
            buildtype: "boost"
            packages: "clang-3.4"
            packages_to_remove: ""
            os: "ubuntu-16.04"
            container: "ubuntu:14.04"
            cxx: "/usr/bin/clang++"
            sources: ""
            llvm_os: ""
            llvm_ver: ""
            toolset: "clang"
            compiler: "/usr/bin/clang++"
            cxxstd: "03,11"
          - name: "UBSAN=1 TOOLSET=clang COMPILER=clang++-11 CXX Job 9"
            buildtype: "boost"
            packages: "clang-11"
            packages_to_remove: ""
            os: "ubuntu-16.04"
            cxx: "clang++-11"
            sources: ""
            llvm_os: "xenial"
            llvm_ver: "11"
            ubsan: "1"
            toolset: "clang"
            compiler: "clang++-11"
            cxxstd: "03,11,14,17,20"
            ubsan_options: "print_stacktrace=1"
          - name: "UBSAN=1 TOOLSET=clang COMPILER=clang++-libc++ Job 10"
            buildtype: "boost"
            packages: "  libc++-9-dev libc++abi-9-dev"
            packages_to_remove: "libc++-dev libc++abi-dev"
            os: "ubuntu-18.04"
            cxx: "clang++-libc++"
            sources: ""
            llvm_os: "bionic"
            llvm_ver: "9"
            ubsan: "1"
            toolset: "clang"
            compiler: "clang++-libc++"
            cxxstd: "03,11,14,17,2a"
            ubsan_options: "print_stacktrace=1"
          - name: "CMAKE_TEST=1 Job 17"
            buildtype: "a08aacae18-e034891c01"
            packages: ""
            packages_to_remove: ""
            os: "ubuntu-16.04"
            cxx: "g++"
            sources: ""
            llvm_os: ""
            llvm_ver: ""
            cmake_test: "1"
          - name: "CMAKE_SUBDIR_TEST=1 Job 18"
            buildtype: "840114c2a5-fda7c76df5"
            packages: ""
            packages_to_remove: ""
            os: "ubuntu-16.04"
            cxx: "g++"
            sources: ""
            llvm_os: ""
            llvm_ver: ""
            cmake_subdir_test: "1"
          - name: "CMAKE_INSTALL_TEST=1 Job 19"
            buildtype: "a08aacae18-9137ea6891"
            packages: ""
            packages_to_remove: ""
            os: "ubuntu-16.04"
            cxx: "g++"
            sources: ""
            llvm_os: ""
            llvm_ver: ""
            cmake_install_test: "1"

    runs-on: ${{ matrix.os }}
    container: ${{ matrix.container }}

    steps:
      - name: Check if running in container
        if: matrix.container != ''
        run: echo "GHA_CONTAINER=${{ matrix.container }}" >> $GITHUB_ENV
      - name: If running in container, upgrade packages
        if: matrix.container != ''
        run: |
            sudo apt-get -o Acquire::Retries=3 update && DEBIAN_FRONTEND=noninteractive apt-get -y install tzdata && apt-get -o Acquire::Retries=3 install -y sudo software-properties-common wget curl apt-transport-https make apt-file sudo unzip libssl-dev build-essential autotools-dev autoconf automake g++ libc++-helpers python python-pip ruby cpio gcc-multilib g++-multilib pkgconf python3 python3-pip ccache libpython-dev
            sudo apt-add-repository ppa:git-core/ppa
            sudo apt-get -o Acquire::Retries=3 update && apt-get -o Acquire::Retries=3 -y install git
            sudo python -m pip install --upgrade pip==20.3.4
            sudo /usr/local/bin/pip install cmake

      - uses: actions/checkout@v2

      - name: linux
        shell: bash
        env:
          CXX: ${{ matrix.cxx }}
          SOURCES: ${{ matrix.sources }}
          LLVM_OS: ${{ matrix.llvm_os }}
          LLVM_VER: ${{ matrix.llvm_ver }}
          PACKAGES: ${{ matrix.packages }}
          PACKAGES_TO_REMOVE: ${{ matrix.packages_to_remove }}
          JOB_BUILDTYPE: ${{ matrix.buildtype }}
          TOOLSET: ${{ matrix.toolset }}
          COMPILER: ${{ matrix.compiler }}
          CXXSTD: ${{ matrix.cxxstd }}
          ADDRMD: ${{ matrix.addrmd }}
          UBSAN: ${{ matrix.ubsan }}
          UBSAN_OPTIONS: ${{ matrix.ubsan_options }}
          LINKFLAGS: ${{ matrix.linkflags }}
          CMAKE_TEST: ${{ matrix.cmake_test }}
          CMAKE_SUBDIR_TEST: ${{ matrix.cmake_subdir_test }}
          CMAKE_INSTALL_TEST: ${{ matrix.cmake_install_test }}
          TRAVIS_BRANCH: ${{ github.base_ref }}
          TRAVIS_OS_NAME: "linux"
        run: |
          echo '==================================> SETUP'
          echo '==================================> PACKAGES'
          set -e
          if [ -n "$PACKAGES_TO_REMOVE" ]; then sudo apt-get purge -y $PACKAGES_TO_REMOVE; fi
          echo ">>>>> APT: REPO.."
          for i in {1..3}; do sudo -E apt-add-repository -y "ppa:ubuntu-toolchain-r/test" && break || sleep 2; done
          
          if test -n "${LLVM_OS}" ; then
              wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
              if test -n "${LLVM_VER}" ; then
                  sudo -E apt-add-repository "deb http://apt.llvm.org/${LLVM_OS}/ llvm-toolchain-${LLVM_OS}-${LLVM_VER} main"
              else
                  # Snapshot (i.e. trunk) build of clang
                  sudo -E apt-add-repository "deb http://apt.llvm.org/${LLVM_OS}/ llvm-toolchain-${LLVM_OS} main"
              fi
          fi
          echo ">>>>> APT: UPDATE.."
          sudo -E apt-get -o Acquire::Retries=3 update
          if test -n "${SOURCES}" ; then
              echo ">>>>> APT: INSTALL SOURCES.."
              for SOURCE in $SOURCES; do
                  sudo -E apt-add-repository ppa:$SOURCE
              done
          fi
          echo ">>>>> APT: INSTALL ${PACKAGES}.."
          sudo -E DEBIAN_FRONTEND=noninteractive apt-get -o Acquire::Retries=3 -y --no-install-suggests --no-install-recommends install ${PACKAGES}

          echo '==================================> INSTALL AND COMPILE'
          set -e
          set -x
          export TRAVIS_BUILD_DIR=$(pwd)
          export TRAVIS_BRANCH=${TRAVIS_BRANCH:-$(echo $GITHUB_REF | awk 'BEGIN { FS = "/" } ; { print $3 }')}
          export VCS_COMMIT_ID=$GITHUB_SHA
          export GIT_COMMIT=$GITHUB_SHA
          export REPO_NAME=$(basename $GITHUB_REPOSITORY)
          export USER=$(whoami)
          export CC=${CC:-gcc}
          export PATH=~/.local/bin:/usr/local/bin:$PATH

          if [ "$JOB_BUILDTYPE" == "boost" ]; then

          echo '==================================> INSTALL'

          BOOST_BRANCH=develop
          if [ "$TRAVIS_BRANCH" = "master" ]; then BOOST_BRANCH=master; fi
          cd ..
          git clone -b $BOOST_BRANCH https://github.com/boostorg/boost.git boost-root
          cd boost-root
          git submodule init libs/headers
          git submodule init libs/assert
          git submodule init libs/config
          git submodule init libs/predef
          git submodule init libs/static_assert
          git submodule init libs/throw_exception
          git submodule init libs/type_traits
          git submodule init tools/build
          git submodule init tools/boost_install
          git submodule init tools/cmake
          git submodule update
          cp -r $TRAVIS_BUILD_DIR/* libs/core
          ./bootstrap.sh
          ./b2 headers

          echo '==================================> SCRIPT'

          echo "using $TOOLSET : : $COMPILER ;" > ~/user-config.jam
          BUILD_JOBS=`(nproc || sysctl -n hw.ncpu) 2> /dev/null`
          ./b2 -j $BUILD_JOBS libs/core/test toolset=$TOOLSET cxxstd=$CXXSTD variant=debug,release ${ADDRMD:+address-model=$ADDRMD} ${UBSAN:+cxxflags=-fsanitize=undefined cxxflags=-fno-sanitize-recover=undefined linkflags=-fsanitize=undefined define=UBSAN=1 debug-symbols=on} ${LINKFLAGS:+linkflags=$LINKFLAGS}

          elif [ "$JOB_BUILDTYPE" == "a08aacae18-e034891c01" ]; then

          echo '==================================> INSTALL'

          BOOST_BRANCH=develop
          if [ "$TRAVIS_BRANCH" = "master" ]; then BOOST_BRANCH=master; fi
          cd ..
          git clone -b $BOOST_BRANCH https://github.com/boostorg/boost.git boost-root
          cd boost-root
          git submodule init libs/headers
          git submodule init libs/assert
          git submodule init libs/config
          git submodule init libs/predef
          git submodule init libs/static_assert
          git submodule init libs/throw_exception
          git submodule init libs/type_traits
          git submodule init tools/build
          git submodule init tools/boost_install
          git submodule init tools/cmake
          git submodule update
          cp -r $TRAVIS_BUILD_DIR/* libs/core
          ./bootstrap.sh
          ./b2 headers

          echo '==================================> SCRIPT'

          mkdir __build__ && cd __build__
          cmake -DBOOST_ENABLE_CMAKE=1 -DBoost_VERBOSE=1 -DBOOST_INCLUDE_LIBRARIES=core ..
          ctest --output-on-failure -R boost_core

          elif [ "$JOB_BUILDTYPE" == "840114c2a5-fda7c76df5" ]; then

          echo '==================================> INSTALL'

          BOOST_BRANCH=develop
          if [ "$TRAVIS_BRANCH" = "master" ]; then BOOST_BRANCH=master; fi
          git clone -b $BOOST_BRANCH https://github.com/boostorg/config.git ../config
          git clone -b $BOOST_BRANCH https://github.com/boostorg/assert.git ../assert

          echo '==================================> SCRIPT'

          cd test/cmake_subdir_test && mkdir __build__ && cd __build__
          cmake ..
          cmake --build .
          cmake --build . --target check

          elif [ "$JOB_BUILDTYPE" == "a08aacae18-9137ea6891" ]; then

          echo '==================================> INSTALL'

          BOOST_BRANCH=develop
          if [ "$TRAVIS_BRANCH" = "master" ]; then BOOST_BRANCH=master; fi
          cd ..
          git clone -b $BOOST_BRANCH https://github.com/boostorg/boost.git boost-root
          cd boost-root
          git submodule init libs/headers
          git submodule init libs/assert
          git submodule init libs/config
          git submodule init libs/predef
          git submodule init libs/static_assert
          git submodule init libs/throw_exception
          git submodule init libs/type_traits
          git submodule init tools/build
          git submodule init tools/boost_install
          git submodule init tools/cmake
          git submodule update
          cp -r $TRAVIS_BUILD_DIR/* libs/core
          ./bootstrap.sh
          ./b2 headers

          echo '==================================> SCRIPT'

          mkdir __build__ && cd __build__
          cmake -DBOOST_ENABLE_CMAKE=1 -DBoost_VERBOSE=1 -DBOOST_INCLUDE_LIBRARIES="assert;config;core" -DCMAKE_INSTALL_PREFIX=~/.local ..
          cmake --build . --target install
          cd ../libs/core/test/cmake_install_test && mkdir __build__ && cd __build__
          cmake -DCMAKE_INSTALL_PREFIX=~/.local ..
          cmake --build .
          cmake --build . --target check

          fi
  osx:
    strategy:
      fail-fast: false
      matrix:
        include:
#
# Github Actions only supports certain Xcode versions
# Change (or delete) the Xcode version for this job.
# 
#           - name: "TOOLSET=clang COMPILER=clang++ CXXSTD=03,11,1 Job 12"
#             buildtype: "boost"
#             packages: ""
#             os: "macos-10.15"
#             cxx: "clang++"
#             sources: ""
#             llvm_os: ""
#             llvm_ver: ""
#             xcode_version: "7.3"
#             toolset: "clang"
#             compiler: "clang++"
#             cxxstd: "03,11,14,1z"
#             addrmd: "32,64"
#
# Github Actions only supports certain Xcode versions
# Change (or delete) the Xcode version for this job.
# 
#           - name: "TOOLSET=clang COMPILER=clang++ CXXSTD=03,11,1 Job 13"
#             buildtype: "boost"
#             packages: ""
#             os: "macos-10.15"
#             cxx: "clang++"
#             sources: ""
#             llvm_os: ""
#             llvm_ver: ""
#             xcode_version: "8.3"
#             toolset: "clang"
#             compiler: "clang++"
#             cxxstd: "03,11,14,1z"
#             addrmd: "32,64"
#
# Github Actions only supports certain Xcode versions
# Change (or delete) the Xcode version for this job.
# 
#           - name: "TOOLSET=clang COMPILER=clang++ CXXSTD=03,11,1 Job 14"
#             buildtype: "boost"
#             packages: ""
#             os: "macos-10.15"
#             cxx: "clang++"
#             sources: ""
#             llvm_os: ""
#             llvm_ver: ""
#             xcode_version: "9.4"
#             toolset: "clang"
#             compiler: "clang++"
#             cxxstd: "03,11,14,1z"
#             addrmd: "32,64"
#
# Github Actions only supports certain Xcode versions
# Change (or delete) the Xcode version for this job.
# 
#           - name: "TOOLSET=clang COMPILER=clang++ CXXSTD=03,11,1 Job 15"
#             buildtype: "boost"
#             packages: ""
#             os: "macos-10.15"
#             cxx: "clang++"
#             sources: ""
#             llvm_os: ""
#             llvm_ver: ""
#             xcode_version: "10.1"
#             toolset: "clang"
#             compiler: "clang++"
#             cxxstd: "03,11,14,1z"
          - name: "UBSAN=1 TOOLSET=clang COMPILER=clang++ CXXSTD Job 16"
            buildtype: "boost"
            packages: ""
            os: "macos-10.15"
            cxx: "clang++"
            sources: ""
            llvm_os: ""
            llvm_ver: ""
            xcode_version: "11.3"
            ubsan: "1"
            toolset: "clang"
            compiler: "clang++"
            cxxstd: "03,11,14,1z"
            ubsan_options: "print_stacktrace=1"

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v2

      - name: Set DEVELOPER_DIR
        if: matrix.xcode_version != ''
        run: echo "DEVELOPER_DIR=/Applications/Xcode_${{ matrix.xcode_version }}.app/Contents/Developer" >> $GITHUB_ENV
      - name: Test DEVELOPER_DIR
        run: echo $DEVELOPER_DIR

      - name: "osx"
        shell: bash
        env:
          CXX: ${{ matrix.cxx }}
          SOURCES: ${{ matrix.sources }}
          LLVM_OS: ${{ matrix.llvm_os }}
          LLVM_VER: ${{ matrix.llvm_ver }}
          PACKAGES: ${{ matrix.packages }}
          JOB_BUILDTYPE: ${{ matrix.buildtype }}
          TOOLSET: ${{ matrix.toolset }}
          COMPILER: ${{ matrix.compiler }}
          CXXSTD: ${{ matrix.cxxstd }}
          ADDRMD: ${{ matrix.addrmd }}
          UBSAN: ${{ matrix.ubsan }}
          UBSAN_OPTIONS: ${{ matrix.ubsan_options }}
          LINKFLAGS: ${{ matrix.linkflags }}
          CMAKE_TEST: ${{ matrix.cmake_test }}
          CMAKE_SUBDIR_TEST: ${{ matrix.cmake_subdir_test }}
          CMAKE_INSTALL_TEST: ${{ matrix.cmake_install_test }}
          TRAVIS_BRANCH: ${{ github.base_ref }}
          TRAVIS_OS_NAME: "osx"
        run: |
          echo '==================================> SETUP'
          set -e
          echo '==================================> PACKAGES'
          echo '==================================> INSTALL AND COMPILE'
          set -e
          set -x
          export TRAVIS_BUILD_DIR=$(pwd)
          export TRAVIS_BRANCH=${TRAVIS_BRANCH:-$(echo $GITHUB_REF | awk 'BEGIN { FS = "/" } ; { print $3 }')}
          export VCS_COMMIT_ID=$GITHUB_SHA
          export GIT_COMMIT=$GITHUB_SHA
          export REPO_NAME=$(basename $GITHUB_REPOSITORY)
          export USER=$(whoami)
          export CC=${CC:-gcc}
          export PATH=~/.local/bin:/usr/local/bin:$PATH

          if [ "$JOB_BUILDTYPE" == "boost" ]; then

          echo '==================================> INSTALL'

          BOOST_BRANCH=develop
          if [ "$TRAVIS_BRANCH" = "master" ]; then BOOST_BRANCH=master; fi
          cd ..
          git clone -b $BOOST_BRANCH https://github.com/boostorg/boost.git boost-root
          cd boost-root
          git submodule init libs/headers
          git submodule init libs/assert
          git submodule init libs/config
          git submodule init libs/predef
          git submodule init libs/static_assert
          git submodule init libs/throw_exception
          git submodule init libs/type_traits
          git submodule init tools/build
          git submodule init tools/boost_install
          git submodule init tools/cmake
          git submodule update
          cp -r $TRAVIS_BUILD_DIR/* libs/core
          ./bootstrap.sh
          ./b2 headers

          echo '==================================> SCRIPT'

          echo "using $TOOLSET : : $COMPILER ;" > ~/user-config.jam
          BUILD_JOBS=`(nproc || sysctl -n hw.ncpu) 2> /dev/null`
          ./b2 -j $BUILD_JOBS libs/core/test toolset=$TOOLSET cxxstd=$CXXSTD variant=debug,release ${ADDRMD:+address-model=$ADDRMD} ${UBSAN:+cxxflags=-fsanitize=undefined cxxflags=-fno-sanitize-recover=undefined linkflags=-fsanitize=undefined define=UBSAN=1 debug-symbols=on} ${LINKFLAGS:+linkflags=$LINKFLAGS}

          fi
